{"version":3,"file":"static/js/317.30de6751.chunk.js","mappings":"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","sources":["modules/RegisterForm/fields.js","modules/RegisterForm/initialState.js","webpack://react-homework-template/./src/modules/RegisterForm/register-form.module.css?5984","modules/RegisterForm/RegisterForm.jsx","page/RegisterPage/RegisterPage.jsx","webpack://react-homework-template/./src/shared/component/Button/button.module.css?5ed7","shared/component/Button/Button.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://react-homework-template/./src/shared/component/TextField/text-field.module.css?3919","shared/component/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js","shared/hooks/useForm.js"],"sourcesContent":["const fields = {\n    name: {\n        type: \"text\",\n        name: \"name\",\n        required: true,\n        label: \"User name\",\n        placeholder: \"User name\",\n    },\n    email: {\n        type: \"email\",\n        name: \"email\",\n        required: true,\n        label: \"User email\",\n        placeholder: \"User email\",\n    },\n    password: {\n        type: \"password\",\n        name: \"password\",\n        required: true,\n        label: \"User password\",\n        placeholder: \"User password\",\n    },\n};\n\nexport default fields;","const initialState = {\n    name: \"\",\n    email: \"\",\n    password: \"\"\n}\n\nexport default initialState;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"register-form_form__R0LAM\"};","import TextField from \"../../shared/component/TextField/TextField\";\nimport Button from \"../../shared/component/Button/Button\";\n\nimport useForm from \"../../shared/hooks/useForm\";\n\nimport fields from \"./fields\";\nimport initialState from \"./initialState\";\n\nimport styles from \"./register-form.module.css\";\n\nconst RegisterForm = ({onSubmit}) => {\n    const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n    const {name, email, password} = state;\n\n    return (\n        <form onSubmit={handleSubmit} className={styles.form}>\n            <TextField value={name} handleChange={handleChange} {...fields.name} />\n            <TextField value={email} handleChange={handleChange} {...fields.email} />\n            <TextField value={password} handleChange={handleChange} {...fields.password} />\n            <Button>Register</Button>\n        </form>\n    )\n}\n\nexport default RegisterForm;","import { useSelector, useDispatch } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nimport {signup} from \"../../redux/auth/auth-operations\";\nimport {isUserLogin} from \"../../redux/auth/auth-selectors\";\n\nimport RegisterForm from \"../../modules/RegisterForm/RegisterForm\";\n\n\n\nconst RegisterPage = () => {\n    const isLogin = useSelector(isUserLogin);\n    const dispatch = useDispatch();\n\n    const handleSignup = (data) => {\n        dispatch(signup(data));\n    }\n\n    if(isLogin) {\n        return <Navigate to=\"/contacts\" />\n    }\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"page-title\">Register page</h1>\n            <RegisterForm onSubmit={handleSignup} />\n        </div>\n    )\n}\n\nexport default RegisterPage;","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button_btn__r1lcq\"};","import styles from \"./button.module.css\";\n\nconst Button = ({children, type = \"submit\"}) =>{\n    return <button type={type} className={styles.btn}>{children}</button>\n}\n\nexport default Button;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"text-field_wrapper__jRXgA\",\"field\":\"text-field_field__4aGz6\"};","import { useMemo } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport styles from \"../../component/TextField/text-field.module.css\";\n\nconst TextField = ({label, handleChange, ...props}) => {\n    const id = useMemo(()=> nanoid(), []);\n\n    return (\n        <div className={styles.wrapper}>\n            <label htmlFor={id}>{label}</label>\n            <input className={styles.field} id={id} onChange={handleChange} {...props} />\n        </div>\n    )\n}\n\nexport default TextField;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState, useCallback } from \"react\";\n\nconst useForm = ({initialState, onSubmit})=> {\n    const [state, setState] = useState({...initialState})\n\n    const handleChange = useCallback(({target}) => {\n        const {name, value} = target;\n        setState(prevState => {\n            return {...prevState, [name]: value}\n        })\n    }, [setState]);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;"],"names":["name","type","required","label","placeholder","email","password","onSubmit","useForm","initialState","state","handleChange","handleSubmit","className","styles","TextField","value","fields","Button","isLogin","useSelector","isUserLogin","dispatch","useDispatch","to","data","signup","children","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","props","id","useMemo","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","htmlFor","onChange","useState","setState","useCallback","prevState","e","preventDefault"],"sourceRoot":""}